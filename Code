#CODE FOR BASIC Binary to Gray Code Converter with high memory usage

module binary_to_gray_pipeline (
    input wire clk,
    input wire reset,
    input wire [3:0] binary,
    output reg [3:0] gray
);
    reg [3:0] stage1, stage2, stage3;
   
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            stage1 <= 4'b0;
        end else begin
            stage1 <= binary;
        end
    end

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            stage2 <= 4'b0;
        end else begin
            stage2[3] <= stage1[3];
            stage2[2] <= stage1[3] ^ stage1[2];
            stage2[1:0] <= stage1[1:0];
        end
    end

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            stage3 <= 4'b0;
        end else begin
            stage3[3:2] <= stage2[3:2];
            stage3[1] <= stage2[2] ^ stage2[1];
            stage3[0] <= stage2[1] ^ stage2[0];
        end
    end

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            gray <= 4'b0;
        end else begin
            gray <= stage3;
        end
    end
endmodule


#CODE FOR Basic Binary to gray code converter with less area usage

def binary_to_gray(binary):
    # Convert binary string to integer
    binary = int(binary, 2)
    # Perform XOR between binary and binary right-shifted by 1
    gray = binary ^ (binary >> 1)
    # Convert result to binary string and return
    return bin(gray)[2:]

# Example usage
binary_number = input("Enter a binary number: ")
gray_code = binary_to_gray(binary_number)
print(f"Gray code: {gray_code}")
